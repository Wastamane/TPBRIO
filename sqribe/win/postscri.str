%!PS-Adobe
% Postscri.str - SQR Postscript startup file
%
% Copyright (C) 1994-2004 Hyperion Solutions Corporation. All Rights Reserved.
%
% Edit:
% -----
% 02-25-93  PAB  (SQR-0194)
%                  o Modifications were made to support the various viewers
%                    available on the market. (e.g. pageview on SUN Sparc)
% (_V2.5.6_)
% 05-13-94  GLD  (DEV-1009)
%                  o Added 'Worldwide' Rights
% (_V3.0_)
% 08-03-94  DAN  (M-023)
%                  o Corrected location of place calculation in hline, vline, box.
%                    Will be in effect on very wide lines.
%                  o  Correction made to enable overlapping lines / boxes
% 08-03-94  JLK  (DEV-3016)
%                  o Allow for multiple print options
%                  o Increased dictionary size to 100
% 09-02-94  EMP  (DEV-3008)
%                  o Added macros for Grafsmap PS definitions
% 09-02-94  EMP  (DEV-3009)
%                  o Added cbox for 'crossed' box when image provided to SQR
%                    is not proper
%                  o Added epsimg to perform EPS/AI translation and scaling
% 09-08-94  PAB  (DEV-1033)
%                  o Added ^D at end of file to prevent timeouts
% (_V3.0.5_)
% 12-07-94  PAB  (DEV-3557)
%                  o This version of 'postsrci.str' supports the ISO character.
%                    >> No longer Level 1 <<
%                    Adapted from: Seppo Kortelainen, Relatech Oy, Finland
%                                  Bernt Olofsson, Infotool, Sweden
% (_V3.5_)
% 07-31-95  PAB  (DEV-4007)
%                  o Account for minus sign (-) floating into comma
%                    position when processing SPF_PNUM packet.
% 08-03-95  PAB  (DEV-4001)
%                  o Redesigned the /ns macro for to handle alternate
%                    characters for the money-sign, thousand-separator and
%                    decimal-separator.  It now will work with EBCDIC strings.
%                  o Increased dictionary size to 200.
% 04-25-96  PAB  (LB-1031)
%                  o Added 'AE, Oslash, ae, oslash' to "Ansi/ISO/Windows"
%                    and "PC8"
% (_V4.0_)
% 08-13-96  PAB  (OH-1753)
%                 o Put back the old '/ns' macro under the name '/nsv1' for
%                   older SPF files.
%                 o Increased dictionary size to 250.
% 10-01-96  PAB  (OH-1969)
%                 o Added 'save/restore' to instantiate each page.
% (_V4.3.2_)
% 09-01-98  PAB  (TS-4353)
%                 o Changed comments about GRAPHIC command to ALTER-PRINTER.
% (_V4.3.3_)
% 04-12-99  PAB  (OH-6936)
%                 o Added Ansi/ISO/Windows (French)/(German) encoding examples
% (_V4.3.5_)
% 07-14-99  PAB  (OH-8391)
%                 o The "ns" macro now takes the textual characters for the
%                   thousand and decimal indicators instead of their
%                   numerical value.
% (_V6.0_)
% 11-29-99  PAB  (OH-9346)
%                 o Added /fillbox and /ebf to support COLOR
% (_V6.2_)
% 03-05-01  PAB  (OH-12521)
%                 o Added "Portuguese" encoding example
% (_V8.0_)
% 01-22-02  PAB  (OH-13259)
%                 o Update copyright notice
% (_V8.0.1_)
% 10-08-02  JLK  (TS-13652)
%                 o Added /HalfNudge
%                 o For proportional fonts, added support for /Dash.
%                   Also, modified logic for /Equal so that minus sign
%                   is not overlaying dollar sign.
% (_V8.1_)
% 12-10-02  PAB  (CQ-10043)
%                  o Change ending copyright year to 2003.
% (_V8.2_)
% 09-25-03  PAB  (CQ-14573)
%                  o Corrected problem with thousand separator was a blank.
% 10-22-03  PAB  (CQ-17390)
%                  o Rebranding effort
% (_EOH_)
% Note: The lines beginning '%PROLOG1' and '%PROLOG2' are required.

/server save def   % Save postscript VM stack
/sqdict 250 dict def
sqdict begin

/FS {   % pass font scale, name
    findfont exch scalefont
    } bind def

%PROLOG1  Values passed by user are inserted here:

%
% Character encoding for ISO, PC8, 7-bit characters (Scandinavian etc...)
%
/reencsmalldict 12 dict def
/ReEncode
 {reencsmalldict begin
    /newcodesandnames exch def
    /newfontname exch def
    /basefontname exch def
    /basefontdict basefontname findfont def
    /newfont basefontdict maxlength dict def

    basefontdict
	{exch dup /FID ne
	  {dup /Encoding eq
	    {exch dup length array copy
		 newfont 3 1 roll put}
	    {exch newfont 3 1 roll put}
	    ifelse
	  }
	  {pop pop}
	  ifelse
	} forall

    newfont /FontName newfontname put
    newcodesandnames aload pop

    newcodesandnames length 2 idiv
	{newfont /Encoding get 3 1 roll put}
	repeat

    newfontname newfont definefont pop
    end
  } def

%
% Comment/uncomment the character CODE table not used/used
%

%
% 7-bit (Finnish, Swedish)
%
% /CODE [
% 91 /Adieresis
% 92 /Odieresis
% 93 /Aring
% 123 /adieresis
% 124 /odieresis
% 125 /aring
% ] def

%
% Ansi/ISO/Windows (Finnish, Swedish)
%
/CODE [
196 /Adieresis
197 /Aring
198 /AE
214 /Odieresis
216 /Oslash
228 /adieresis
229 /aring
230 /ae
246 /odieresis
248 /oslash
]def

%
% PC8 (Finnish, Swedish)
%
% /CODE [
% 132 /adieresis
% 134 /aring
% 142 /Adieresis
% 143 /Aring
% 145 /ae
% 146 /AE
% 148 /odieresis
% 153 /Odieresis
% 155 /oslash
% 157 /Oslash
% ]def

%
% Ansi/ISO/Windows (French)
%
 /CODE [
 128 /ECHO
 192 /Agrave
 194 /Acircumflex
 199 /Ccedilla
 200 /Egrave
 201 /Eacute
 202 /Ecircumflex
 203 /Edieresis
 206 /Icircumflex
 207 /Idieresis
 212 /Ocircumflex
 217 /Ugrave
 219 /Ucircumflex
 224 /agrave
 226 /acircumflex
 231 /ccedilla
 232 /egrave
 233 /eacute
 234 /ecircumflex
 235 /edieresis
 238 /icircumflex
 239 /idieresis
 244 /ocircumflex
 249 /ugrave
 251 /ucircumflex
 252 /udieresis
 ]def

%
% Ansi/ISO/Windows (German)
%
% /CODE [
% 196 /Adieresis
% 228 /adieresis
% 214 /Odieresis
% 246 /odieresis
% 220 /Udieresis
% 252 /udieresis
% 223 /germandbls
% 181 /mu
% 167 /section
% ]def

%
% Portugeuse
%
% /CODE [
% 192 /Agrave
% 193 /Aacute
% 194 /Acircumflex
% 195 /Atilde
% 199 /Ccedilla
% 200 /Egrave
% 201 /Eacute
% 202 /Ecircumflex
% 204 /Igrave
% 205 /Iacute
% 206 /Icircumflex
% 210 /Ograve
% 211 /Oacute
% 212 /Ocircumflex
% 213 /Otilde
% 217 /Ugrave
% 218 /Uacute
% 219 /Ucircumflex
% 220 /Udieresis
% 224 /agrave
% 225 /aacute
% 226 /acircumflex
% 227 /atilde
% 231 /ccedilla
% 232 /egrave
% 233 /eacute
% 234 /ecircumflex
% 236 /igrave
% 237 /iacute
% 238 /icircumflex
% 242 /ograve
% 243 /oacute
% 244 /ocircumflex
% 245 /otilde
% 249 /ugrave
% 250 /uacute
% 251 /ucircumflex
% 252 /udieresis
% ]def

%
% Reencode all the fonts
%
/Courier /Courier CODE ReEncode
/Courier-Bold /Courier-Bold CODE ReEncode
/Helvetica /Helvetica CODE ReEncode
/Helvetica-Bold /Helvetica-Bold CODE ReEncode
/Times-Roman /Times-Roman CODE ReEncode
/Times-Bold /Times-Bold CODE ReEncode
/AvantGarde-Book /AvantGarde-Book CODE ReEncode
/Palatino-Roman /Palatino-Roman CODE ReEncode
/Palatino-Bold  /Palatino-Bold CODE ReEncode
/Symbol /Symbol CODE ReEncode
/ZapfDingbats /ZapfDingbats CODE ReEncode
/ZapfChancery-MediumItalic /ZapfChancery-MediumItalic CODE ReEncode
/Bookman-Light /Bookman-Light CODE ReEncode
/NewCenturySchlbk-Roman /NewCenturySchlbk-Roman CODE ReEncode
/NewCenturySchlbk-Bold  /NewCenturySchlbk-Bold CODE ReEncode
/Courier-Oblique /Courier-Oblique CODE ReEncode
/Courier-BoldOblique /Courier-BoldOblique CODE ReEncode
/Helvetica-Oblique /Helvetica-Oblique CODE ReEncode
/Helvetica-BoldOblique /Helvetica-BoldOblique CODE ReEncode
/Times-Italic /Times-Italic CODE ReEncode
/Times-BoldItalic /Times-BoldItalic CODE ReEncode
/AvantGarde-Demi /AvantGarde-Demi CODE ReEncode
/AvantGarde-BookOblique /AvantGarde-BookOblique CODE ReEncode
/AvantGarde-DemiOblique /AvantGarde-DemiOblique CODE ReEncode
/Palatino-Italic /Palatino-Italic CODE ReEncode
/Palatino-BoldItalic /Palatino-BoldItalic CODE ReEncode
/NewCenturySchlbk-Italic /NewCenturySchlbk-Italic CODE ReEncode
/NewCenturySchlbk-BoldItalic /NewCenturySchlbk-BoldItalic CODE ReEncode
/Helvetica-Narrow /Helvetica-Narrow CODE ReEncode
/Helvetica-Narrow-Bold /Helvetica-Narrow-Bold CODE ReEncode
/Helvetica-Narrow-Oblique /Helvetica-Narrow-Oblique CODE ReEncode
/Helvetica-Narrow-BoldOblique /Helvetica-Narrow-BoldOblique CODE ReEncode
/Bookman-Demi /Bookman-Demi CODE ReEncode
/Bookman-LightItalic /Bookman-LightItalic CODE ReEncode
/Bookman-DemiItalic /Bookman-DemiItalic CODE ReEncode

%  Font names:  These may be changed to any fonts that are supported by your
%  		printer.  You may add or delete fonts.  Be careful not to
%		delete fonts or change font numbers in use by existing
%		SQR programs.  The Font_default_size is the point size used
%		when no explicit size is requested.
%
%		The Number's assigned below have been initialized to somewhat
%		emulate the Typeface numbers used by the HP LaserJet
%		(especially 3,4,5 -- Courier, Helvetica and Times-Roman) so
%		SQR programs designed for both printers can use the same
%		font numbers and produce similar results.  If this is not
%		important to you these font numbers may be reassigned any way
%		you like.  NOTE: SQR assumes font 3 (Courier) is a monospaced
%		(not proportional) font.
%
%		The first font in the list will be used if a font number is
%		not found.  The default font number for DECLARE PRINTER is 3.
%
%		Up to three point sizes per font are cached.
%
%		A boldface font (switched to automatically with the BOLD
%		qualifier to the PRINT command) must have a number equal to
%		100 times the font number of its associated lightface font.
%		Numbers assigned to lightface fonts must be between 1 and 99.
%
/Fonts [   % Array of point sizes and font names
% 				                (leave these as zeros)
% Number  Name				    	  Size_A   Size_B  Size_C  ID_A  ID_B  ID_C
% ------  ----------------	    	  ------   ------  ------  ----  ----  ----
   3      /Courier						0		0		0		0      0     0
   300    /Courier-Bold					0		0		0		0      0     0
   4      /Helvetica					0		0		0		0      0     0
   400    /Helvetica-Bold				0		0		0		0      0     0
   5      /Times-Roman					0		0		0		0      0     0
   500    /Times-Bold					0		0		0		0      0     0
   6      /AvantGarde-Book 				0		0		0		0      0     0
   8      /Palatino-Roman				0		0		0		0      0     0
   800    /Palatino-Bold				0		0		0		0      0     0
   11     /Symbol						0		0		0		0      0     0
   12     /ZapfDingbats					0		0		0		0      0     0
   17     /ZapfChancery-MediumItalic	0		0		0		0      0     0
   18     /Bookman-Light				0		0		0		0      0     0
   23     /NewCenturySchlbk-Roman		0		0		0		0      0     0
   2300   /NewCenturySchlbk-Bold		0		0		0		0      0     0
   30     /Courier-Oblique				0		0		0		0      0     0
   3000   /Courier-BoldOblique			0		0		0		0      0     0
   31     /Helvetica-Oblique			0		0		0		0      0     0
   3100   /Helvetica-BoldOblique		0		0		0		0      0     0
   32     /Times-Italic					0		0		0		0      0     0
   3200   /Times-BoldItalic				0		0		0		0      0     0
   33     /AvantGarde-Demi				0		0		0		0      0     0
   34     /AvantGarde-BookOblique		0		0		0		0      0     0
   35     /AvantGarde-DemiOblique		0		0		0		0      0     0
   36     /Palatino-Italic				0		0		0		0      0     0
   3600   /Palatino-BoldItalic			0		0		0		0      0     0
   37     /NewCenturySchlbk-Italic		0		0		0		0      0     0
   3700   /NewCenturySchlbk-BoldItalic	0		0		0		0      0     0
   38     /Helvetica-Narrow				0		0		0		0      0     0
   3800   /Helvetica-Narrow-Bold		0		0		0		0      0     0
   39     /Helvetica-Narrow-Oblique		0		0		0		0      0     0
   3900   /Helvetica-Narrow-BoldOblique	0		0		0		0      0     0
   40     /Bookman-Demi					0		0		0		0      0     0
   41     /Bookman-LightItalic			0		0		0		0      0     0
   42     /Bookman-DemiItalic			0		0		0		0      0     0
    ] def
/Font_i 8 def   % Items in each Font element
/Font_default_size 12 def   % Default point size

%  Select font: You can switch from one font to another within a report by
%		using the ALTER-PRINTER command and specifying the font you want:
%
%		ALTER-PRINTER FONT=23 POINT-SIZE=14 ! NewCenturySchlbk-Roman, 14 points.
%
%		Font is setup in printer only first time it is used, for speed.
%
/SF {   % Select Font:  Pass number of font as defined in Fonts array,
	% and point size.
    /psiz exch dup 0 eq {pop Font_default_size} if def
    /fid exch def
    /flen Fonts length def
    % Find location of font number, use 0 if not found
    /fno 0 def
    {fno flen ge {/fno 0 def exit} if
    	Fonts fno get fid eq
    	{exit} {/fno fno Font_i add def} ifelse} loop
    % fno now points to font_number.  Now find matching point size.
    /fid fno def
    /fno fno 2 add def
    /flen fno 2 add def   % Limit for sizes in array
    {fno flen gt
	{/fno fid 2 add def Fonts fno 3 add 0 put Fonts fno psiz put exit}
    	{Fonts fno get dup psiz eq
		{pop exit} if 0 eq {Fonts fno psiz put exit} if} ifelse
	/fno fno 1 add def} loop
    % fno now points to location for point size.
    Fonts fno 3 add get dup 0 eq
	% Font not loaded yet.
	{pop psiz Fonts fid 1 add get FS dup
	Fonts exch fno 3 add exch put} if
    setfont
    (w) stringwidth pop (W) stringwidth pop eq
     {/Font_Is_Fixed 1 def} {/Font_Is_Fixed 0 def} ifelse
    } bind def

/lmarg LM 72 mul def	% Left margin
/tmarg TM 72 mul def	% Top margin
/pglen PL 72 mul def    % Page length

/port   % Setup for portrait
   {/ypos pglen tmarg sub def
    initmatrix   % In case preceded by landscape page
    lmarg ypos moveto} def

/portrait
  {port
   /pgtop pglen tmarg sub def
   /np {   % New-page macro
	showpage
	port
	} def
    } def

/land   % Setup for landscape
   {/ypos 612 tmarg sub def
    initmatrix
    90 rotate
    0 -612 translate
    lmarg ypos moveto} def

/landscape
  {land
   /pgtop 612 tmarg sub def
   /np {   % New-page macro
	showpage
	land
	} def
    } def

/go {   % Goto location - pass SQR line, col
    1 sub CS mul lmarg add exch
    1 sub PS mul pgtop exch sub
    moveto
    } bind def

/hline {   % Make horizontal line.
    	   % Pass line, col, length, thickness
	   % Line goes to right from location indicated
    /thick exch def thick setlinewidth
    /len exch CS mul def
    1 sub CS mul lmarg add exch
    1 sub PS mul pgtop exch sub
    PS .15 mul thick .5 mul add sub   % alter y, just below baseline
    moveto
    len 0 rlineto stroke
    } def

/vline {   % Make vertical line.
	   % Pass line, col, length, thickness
	   % Line goes down from location indicated
    /thick exch def thick setlinewidth
    /len exch PS mul def
    1 sub CS mul lmarg add thick .5 mul sub exch
    1 sub PS mul pgtop exch sub
    PS .15 mul sub   % alter y, just below baseline
    moveto
    0 len -1 mul rlineto stroke
    } def

/box {   % Make box.
	 % Pass line, col, depth, width, thickness, shading
	 % Location passed is upper left corner of box
    	 % If shading = 1, then box is not filled, but lines are
    	 % stroked using thickness
    gsave
    /shading exch def
    /thick exch def
    shading 1 eq {thick setlinewidth} {/thick 0 def} ifelse
    /width exch CS mul def
    /depth exch PS mul def
    1 sub CS mul lmarg add
    exch 2 sub PS mul pgtop exch sub
    PS .15 mul thick .5 mul add sub   % alter y, just below baseline
    moveto
    width 0 rlineto		% Top of box
    0 depth -1 mul rlineto	% Right edge
    width -1 mul 0 rlineto	% Bottom
    closepath 			% Closes box
    shading 1 eq {stroke} {shading setgray fill} ifelse
    grestore
    } def

/fillbox {   % Make box.
	 % Pass line, col, depth, width, thickness
	 % Location passed is upper left corner of box
    gsave
    /thick exch def
    /width exch CS mul def
    /depth exch PS mul def
    1 sub CS mul lmarg add
    exch 2 sub PS mul pgtop exch sub
    PS .15 mul thick .5 mul add sub   % alter y, just below baseline
    moveto
    width 0 rlineto		% Top of box
    0 depth -1 mul rlineto	% Right edge
    width -1 mul 0 rlineto	% Bottom
    closepath 			% Closes box
    fill
    grestore
    } def

/cbox
	{
	%% SQRx SQRy SQRw SQRh
	gsave
    %% make box
	2 index 4 index 2 index 4 index 0.2 1.00 box
	newpath
	0.2 setlinewidth
	1 1 go
	0 PS PS .15 mul sub rmoveto
    %% Upper left of SQR frame
	3 index 1 sub CS mul
	3 index 1 exch sub PS mul rmoveto
    %% Lower right of SQR frame
	1 index CS mul
	1 index 0 exch sub PS mul rlineto
	closepath
	stroke
	pop pop pop pop
	grestore
    } def

/mtrx matrix def

/epsimg {

	%% SQRx SQRy SQRw SQRh EPSx EPSy EPSw EPSh
	1 1 go
    %% Upper left of SQR frame
	7 index 1 sub CS mul
	7 index 1 exch sub PS mul rmoveto
    %% Lower left of SQR frame
	4 index 1 exch sub PS mul
	0 exch rmoveto
    %% Translate from currentpoint
	currentpoint translate
    %% Scale to proper size
	5 index CS mul
	2 index div
	5 index PS mul
	2 index div
	scale
    %% Translate from EPS lower left corner
	3 index 0 exch sub
	3 index 0 exch sub
	translate
    %% Pop off items from stack
	pop pop pop pop pop pop pop pop
    } def

/bu {   % Begin underline or box or shade
    currentpoint /Uy exch def /Ux exch def
    } bind def

/eu {   % End underline
    gsave
    currentpoint
    PS 6.75 div sub moveto
    Ux Uy PS 6.75 div sub lineto
    PS 16.67 div setlinewidth
    stroke
    grestore
    } bind def

/eb {   % End box or shade.
	% Pass line, col, depth, thickness, shading
	% Calculate width, put it between depth and thickness on stack, and
	% call box.
    currentpoint pop Ux sub CS div 3 1 roll
    box
    } bind def

/ebf {   % End box or shade.
	% Pass line, col, depth, thickness, shading
	% Calculate width, put it between depth and thickness on stack, and
	% call box.
    currentpoint pop Ux sub CS div 2 1 roll
    fillbox
    } bind def

/nsv1  {   % Number set - pass line, col, dollar-sym, string
	 % Sets number in fixed character locations - for proportional fonts
	 % in string: _ = $ floated into comma, ' = ( floated into comma,
	 % ` = blank for width of comma.
    /str exch def
    /dlr exch def
    /col exch def
    /lin exch def
    /j 0 def
    /tchr (a) def
    /digw (0) stringwidth pop def
    /comw (,) stringwidth pop def
    /addw digw def
    /newcs col 1 sub CS mul lmarg add def
    /thisln lin 1 sub PS mul pgtop exch sub def
    str length 
	{str j get /tcod exch def 
    	tchr 0 tcod put
	/j j 1 add def
	% check for special characters, set up addw
	tcod 95 eq   % _ - convert to $
		{tchr 0 dlr put 
		 /newcs newcs digw comw sub sub def} if
	tcod 39 eq   % ' - convert to (
		{tchr 0 40 put 
		 /newcs newcs digw comw sub sub def} if
	tcod 78 eq   % N/A
		{newcs comw sub thisln moveto (N/A) sh exit} if
	tcod 110 eq  % n/a
		{newcs thisln moveto (n/a) sh exit} if
	tcod 96 eq   % ` - convert to space
		{tchr 0 32 put /addw comw def}
		{tcod 44 eq tcod 46 eq or   % , or .
			{/addw comw def} {/addw digw def} ifelse} 
	  ifelse
	newcs thisln moveto tchr sh
	/newcs newcs addw add def} repeat
    } bind def

/ns
  {
   % Number set: Sets number in fixed character locations for
   %             proportional fonts.
   % Arguments:  DecimalSep, ThousandSep, String
   %
   % Special     # = Money-Sign (single character) floated into comma
   %             % = ( floated into comma
   %             | = blank for width of comma (was * character)
   %             @ = blank for width of comma
   %             ! = Start of Money-Sign
   %             = = - floated into comma
   %
  /String       exch def
  /Seps         exch def
  /DecimalSep   Seps 0 get def
  /ThousandSep  Seps 1 get def

  /Dash         (-) 0 get def
  /Space        ( ) 0 get def
  /Asterick     (*) 0 get def
  /PoundSign    (#) 0 get def
  /Percent      (%) 0 get def
  /AtSign       (@) 0 get def
  /VertBar      (|) 0 get def
  /Bang         (!) 0 get def
  /Equal        (=) 0 get def
  /LeftParen    (\() 0 get def
  /RightParen   (\)) 0 get def
  /TextChar     (a) def

  Font_Is_Fixed 1 eq
   {
   /Index 0 def
   /Skip 0  def
   String length
    {
    Skip 0 eq
     {String Index get /TextCode exch def
      TextChar 0 TextCode put
      TextCode Equal eq
       {TextChar 0 Dash put}
       {TextCode AtSign eq
         {TextChar 0 Space put}
         {TextCode Percent eq
           {TextChar 0 LeftParen put}
           {TextCode VertBar eq
             {TextChar 0 Asterick put}
             if}
           ifelse}
         ifelse}
       ifelse
     TextCode Bang eq TextCode PoundSign  eq or
      {MS sh /Skip MS length 1 sub def}
      {TextChar sh} ifelse
     }
     {
     /Skip Skip 1 sub def
     } ifelse
    /Index Index 1 add def
    } repeat
   }
   {
   /ThousandChar (a) def
   /DecimalChar  (a) def
   /DigitWidth   (0) stringwidth pop def
   /MSChar       (a) def
   /MSCode        0 def

   /ThoSepWidth ThousandChar 0 ThousandSep put ThousandChar stringwidth pop def
   /DecSepWidth DecimalChar 0 DecimalSep put DecimalChar stringwidth pop def
   /Nudge DigitWidth ThoSepWidth sub def
   /HalfNudge .5 Nudge mul def

   /MoneySignWidth 0 def
   /Index 0 def
   String length
    {
    String Index get /TextCode exch def
    TextCode Bang eq TextCode PoundSign  eq or
     {/Loop 0 def
      MS length
       {
       MS Loop get /MSCode exch def
       MSChar 0 MSCode put
       /Width MSChar stringwidth pop def

       String Index get /TextCode exch def
       TextCode AtSign eq
        {/Width Width ThoSepWidth sub def} if
       /MoneySignWidth MoneySignWidth Width add def

       /Loop Loop 1 add def
       /Index Index 1 add def
       } repeat
      exit
     } if
    /Index Index 1 add def
    } repeat

   %
   % Get the current line and column coordinates
   %
   currentpoint /ThisLine exch def /NewColumn exch def

   %
   % Remember the current line and column coordinates
   %
   /OrigColm NewColumn def
   /OrigLine ThisLine def

   %
   % Process each character of the number string
   %
   /HadMoneySign 0 def
   /Index 0 def
   String length
    {
    String Index get /TextCode exch def
    TextChar 0 TextCode put
    /Index Index 1 add def
    TextCode PoundSign  eq
     {TextChar 0 MS 0 get put
      /Width MoneySignWidth def
      /NewColumn NewColumn Nudge sub def}
     {TextCode Percent eq
       {TextChar 0 LeftParen put
        /Width DigitWidth def
        /NewColumn NewColumn Nudge sub def}
       {TextCode VertBar eq
         {TextChar 0 Space put
          /Width ThoSepWidth def}
         {TextCode AtSign eq
           {TextChar 0 Space put
            /Width ThoSepWidth def}
           {TextCode Equal eq
             {TextChar 0 Dash put
              /Width DigitWidth Nudge sub def}
             {TextCode Bang eq
               {HadMoneySign 0 eq
                {/HadMoneySign 1 def
                 /NewColumn NewColumn MoneySignWidth add def} if
                /Width 0 def}
               {TextCode Space eq 
                 {/Width DigitWidth def}
                {TextCode ThousandSep eq
                  {/Width ThoSepWidth def}
                  {TextCode Dash eq
                    {/Width DigitWidth HalfNudge sub def
                     /NewColumn NewColumn HalfNudge add def}
                    {TextCode DecimalSep eq
                      {/Width DecSepWidth def}
                      {TextCode Space eq TextCode RightParen eq or TextCode Dash eq or TextCode LeftParen eq or
                        {/Width DigitWidth def}
                        {/Width TextChar stringwidth pop def}
                        ifelse}
                       ifelse}
                     ifelse}
                   ifelse}
                 ifelse}
               ifelse}
             ifelse}
           ifelse}
         ifelse}
       ifelse}
     ifelse

     Width 0 ne
      {NewColumn ThisLine moveto TextChar sh
       /NewColumn NewColumn Width add def
      } if
     } repeat

    %
    % If the string had a Money-Sign in it then we need to put it
    % in since the above logic simply left enough space for it.
    %
    HadMoneySign 1 eq
     {
     %
     % Remember our location
     %
     currentpoint /CurrLine exch def /CurrColm exch def

     %
     % Position to the beginning of the string
     %
     OrigColm OrigLine moveto

     %
     % Process each character (advancing position) until we get to the
     % start of the Money-String then we simply output the string.
     %
     /Index 0 def
     String length
      {
      String Index get /TextCode exch def
      TextChar 0 TextCode put
      /Width TextChar stringwidth pop def
      TextCode Space eq TextCode Dash eq or TextCode LeftParen eq or
       {/Width DigitWidth def}
       {TextCode Percent eq
        {/Width DigitWidth Nudge sub def}
        {TextCode AtSign eq
         {/Width ThoSepWidth def}
         {TextCode Bang eq
          {MS sh exit}
         if}
        ifelse}
       ifelse}
      ifelse

      /OrigColm OrigColm Width add def
      OrigColm OrigLine moveto
      /Index Index 1 add def
      } repeat
     %
     % Restore our location
     %
     CurrColm CurrLine moveto
     } if
   } ifelse
  } bind def

/sh {show} bind def   % show macro

OR /l eq {landscape} {portrait} ifelse   % Choose portrait or landscape

% for Grafsman driver

/master /Times-Roman findfont 1.3 scalefont def
/n {newpath} def
/m {moveto} def
/l {lineto} def
/s {stroke} def
/f {gsave fill grestore} def
/d {setdash} def
/g {setgray} def
/c {closepath} def
/t {dup stringwidth exch -.5 mul exch rmoveto show} def

end   % End sqdict definitions

%%EndProlog

%%Page: 1 1
sqdict begin save

%PROLOG2  Data for report begins here:
restore end

% After data:
%%Trailer
server restore   % Restore Postscript VM stack
/EJ {} def  %  To eliminate extra page feed from Windows Print Manager
